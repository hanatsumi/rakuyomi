name: "Build"
on:
  push:
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ["desktop", "kindle"]
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v27
    - uses: cachix/cachix-action@v15
      with:
        name: rakuyomi
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "lts/*"
    - name: Get next version
      run: |
        npm install -D semantic-release-export-data
        npx semantic-release --dry-run
      id: get-next-version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Build plugin
      run: |
        export SEMANTIC_RELEASE_VERSION="${{ steps.get-next-version.outputs.new-release-git-tag }}"
        # Using `--impure` here kinda sucks, but it's needed so that we can insert the `semantic-release`
        # version into the build.
        nix build --impure .#rakuyomi.${{ matrix.target }} -o build/rakuyomi.koplugin
    - name: Package plugin contents
      run: "cd build && zip -r rakuyomi-${{ matrix.target }}.zip rakuyomi.koplugin"
    - name: Get version
      id: get-version
      run: |
        echo "RAKUYOMI_VERSION=$(nix eval --raw .#rakuyomi.version)" >> "$GITHUB_OUTPUT"
    - name: Upload plugin as workflow artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }} build
        path: build/rakuyomi-${{ matrix.target }}.zip
  
  generate-settings-schema:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v27
    - uses: cachix/cachix-action@v15
      with:
        name: rakuyomi
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Build settings schema
      run: "nix build .#rakuyomi.settings-schema -o build/settings.schema.json"
    - name: Upload plugin as workflow artifact
      uses: actions/upload-artifact@v4
      with:
        name: settings.schema.json
        path: build/settings.schema.json
  
  release:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: build
    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm install -D semantic-release-export-data
        npx semantic-release
